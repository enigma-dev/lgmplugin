// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resources/Sprite.proto

package buffers.resources;

public final class SpriteOuterClass {
  private SpriteOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface SpriteOrBuilder extends
      // @@protoc_insertion_point(interface_extends:buffers.resources.Sprite)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string name = 1;</code>
     */
    boolean hasName();
    /**
     * <code>optional string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>optional int32 id = 2 [(.buffers.gmx) = "GMX_DEPRECATED"];</code>
     */
    boolean hasId();
    /**
     * <code>optional int32 id = 2 [(.buffers.gmx) = "GMX_DEPRECATED"];</code>
     */
    int getId();

    /**
     * <code>optional bool preload = 4 [(.buffers.gmx) = "GMX_DEPRECATED"];</code>
     */
    boolean hasPreload();
    /**
     * <code>optional bool preload = 4 [(.buffers.gmx) = "GMX_DEPRECATED"];</code>
     */
    boolean getPreload();

    /**
     * <code>optional bool transparent = 5 [(.buffers.gmx) = "GMX_DEPRECATED"];</code>
     */
    boolean hasTransparent();
    /**
     * <code>optional bool transparent = 5 [(.buffers.gmx) = "GMX_DEPRECATED"];</code>
     */
    boolean getTransparent();

    /**
     * <code>optional bool smooth_edges = 6 [(.buffers.gmx) = "GMX_DEPRECATED"];</code>
     */
    boolean hasSmoothEdges();
    /**
     * <code>optional bool smooth_edges = 6 [(.buffers.gmx) = "GMX_DEPRECATED"];</code>
     */
    boolean getSmoothEdges();

    /**
     * <code>optional int32 alpha_tolerance = 7 [(.buffers.gmx) = "coltolerance"];</code>
     */
    boolean hasAlphaTolerance();
    /**
     * <code>optional int32 alpha_tolerance = 7 [(.buffers.gmx) = "coltolerance"];</code>
     */
    int getAlphaTolerance();

    /**
     * <code>optional bool separate_mask = 8 [(.buffers.gmx) = "sepmasks"];</code>
     */
    boolean hasSeparateMask();
    /**
     * <code>optional bool separate_mask = 8 [(.buffers.gmx) = "sepmasks"];</code>
     */
    boolean getSeparateMask();

    /**
     * <code>optional int32 origin_x = 9 [(.buffers.gmx) = "xorig"];</code>
     */
    boolean hasOriginX();
    /**
     * <code>optional int32 origin_x = 9 [(.buffers.gmx) = "xorig"];</code>
     */
    int getOriginX();

    /**
     * <code>optional int32 origin_y = 10 [(.buffers.gmx) = "yorigin"];</code>
     */
    boolean hasOriginY();
    /**
     * <code>optional int32 origin_y = 10 [(.buffers.gmx) = "yorigin"];</code>
     */
    int getOriginY();

    /**
     * <code>optional .buffers.resources.Sprite.Shape shape = 11 [(.buffers.gmx) = "colkind"];</code>
     */
    boolean hasShape();
    /**
     * <code>optional .buffers.resources.Sprite.Shape shape = 11 [(.buffers.gmx) = "colkind"];</code>
     */
    buffers.resources.SpriteOuterClass.Sprite.Shape getShape();

    /**
     * <code>optional .buffers.resources.Sprite.BoundingBox bbox_mode = 12 [(.buffers.gmx) = "bboxmode"];</code>
     */
    boolean hasBboxMode();
    /**
     * <code>optional .buffers.resources.Sprite.BoundingBox bbox_mode = 12 [(.buffers.gmx) = "bboxmode"];</code>
     */
    buffers.resources.SpriteOuterClass.Sprite.BoundingBox getBboxMode();

    /**
     * <code>optional int32 bbox_left = 13;</code>
     */
    boolean hasBboxLeft();
    /**
     * <code>optional int32 bbox_left = 13;</code>
     */
    int getBboxLeft();

    /**
     * <code>optional int32 bbox_right = 14;</code>
     */
    boolean hasBboxRight();
    /**
     * <code>optional int32 bbox_right = 14;</code>
     */
    int getBboxRight();

    /**
     * <code>optional int32 bbox_top = 15;</code>
     */
    boolean hasBboxTop();
    /**
     * <code>optional int32 bbox_top = 15;</code>
     */
    int getBboxTop();

    /**
     * <code>optional int32 bbox_bottom = 16;</code>
     */
    boolean hasBboxBottom();
    /**
     * <code>optional int32 bbox_bottom = 16;</code>
     */
    int getBboxBottom();

    /**
     * <code>optional int32 type = 17;</code>
     */
    boolean hasType();
    /**
     * <code>optional int32 type = 17;</code>
     */
    int getType();

    /**
     * <code>optional int32 h_tile = 18 [(.buffers.gmx) = "HTile"];</code>
     */
    boolean hasHTile();
    /**
     * <code>optional int32 h_tile = 18 [(.buffers.gmx) = "HTile"];</code>
     */
    int getHTile();

    /**
     * <code>optional int32 v_tile = 19 [(.buffers.gmx) = "VTile"];</code>
     */
    boolean hasVTile();
    /**
     * <code>optional int32 v_tile = 19 [(.buffers.gmx) = "VTile"];</code>
     */
    int getVTile();

    /**
     * <code>optional int32 texture_group = 20 [(.buffers.gmx) = "TextureGroups/TextureGroup0"];</code>
     */
    boolean hasTextureGroup();
    /**
     * <code>optional int32 texture_group = 20 [(.buffers.gmx) = "TextureGroups/TextureGroup0"];</code>
     */
    int getTextureGroup();

    /**
     * <code>optional bool for3D = 21 [(.buffers.gmx) = "For3D"];</code>
     */
    boolean hasFor3D();
    /**
     * <code>optional bool for3D = 21 [(.buffers.gmx) = "For3D"];</code>
     */
    boolean getFor3D();

    /**
     * <code>optional uint32 width = 22;</code>
     */
    boolean hasWidth();
    /**
     * <code>optional uint32 width = 22;</code>
     */
    int getWidth();

    /**
     * <code>optional uint32 height = 23;</code>
     */
    boolean hasHeight();
    /**
     * <code>optional uint32 height = 23;</code>
     */
    int getHeight();

    /**
     * <code>repeated string subimages = 3 [(.buffers.gmx) = "frames/frame", (.buffers.file_path) = true];</code>
     */
    java.util.List<java.lang.String>
        getSubimagesList();
    /**
     * <code>repeated string subimages = 3 [(.buffers.gmx) = "frames/frame", (.buffers.file_path) = true];</code>
     */
    int getSubimagesCount();
    /**
     * <code>repeated string subimages = 3 [(.buffers.gmx) = "frames/frame", (.buffers.file_path) = true];</code>
     */
    java.lang.String getSubimages(int index);
    /**
     * <code>repeated string subimages = 3 [(.buffers.gmx) = "frames/frame", (.buffers.file_path) = true];</code>
     */
    com.google.protobuf.ByteString
        getSubimagesBytes(int index);
  }
  /**
   * Protobuf type {@code buffers.resources.Sprite}
   */
  public  static final class Sprite extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:buffers.resources.Sprite)
      SpriteOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Sprite.newBuilder() to construct.
    private Sprite(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Sprite() {
      name_ = "";
      id_ = 0;
      preload_ = false;
      transparent_ = false;
      smoothEdges_ = false;
      alphaTolerance_ = 0;
      separateMask_ = false;
      originX_ = 0;
      originY_ = 0;
      shape_ = 0;
      bboxMode_ = 0;
      bboxLeft_ = 0;
      bboxRight_ = 0;
      bboxTop_ = 0;
      bboxBottom_ = 0;
      type_ = 0;
      hTile_ = 0;
      vTile_ = 0;
      textureGroup_ = 0;
      for3D_ = false;
      width_ = 0;
      height_ = 0;
      subimages_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Sprite(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              name_ = bs;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              id_ = input.readInt32();
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
                subimages_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00400000;
              }
              subimages_.add(bs);
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              preload_ = input.readBool();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              transparent_ = input.readBool();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              smoothEdges_ = input.readBool();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              alphaTolerance_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000040;
              separateMask_ = input.readBool();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000080;
              originX_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000100;
              originY_ = input.readInt32();
              break;
            }
            case 88: {
              int rawValue = input.readEnum();
              buffers.resources.SpriteOuterClass.Sprite.Shape value = buffers.resources.SpriteOuterClass.Sprite.Shape.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(11, rawValue);
              } else {
                bitField0_ |= 0x00000200;
                shape_ = rawValue;
              }
              break;
            }
            case 96: {
              int rawValue = input.readEnum();
              buffers.resources.SpriteOuterClass.Sprite.BoundingBox value = buffers.resources.SpriteOuterClass.Sprite.BoundingBox.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(12, rawValue);
              } else {
                bitField0_ |= 0x00000400;
                bboxMode_ = rawValue;
              }
              break;
            }
            case 104: {
              bitField0_ |= 0x00000800;
              bboxLeft_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00001000;
              bboxRight_ = input.readInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00002000;
              bboxTop_ = input.readInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00004000;
              bboxBottom_ = input.readInt32();
              break;
            }
            case 136: {
              bitField0_ |= 0x00008000;
              type_ = input.readInt32();
              break;
            }
            case 144: {
              bitField0_ |= 0x00010000;
              hTile_ = input.readInt32();
              break;
            }
            case 152: {
              bitField0_ |= 0x00020000;
              vTile_ = input.readInt32();
              break;
            }
            case 160: {
              bitField0_ |= 0x00040000;
              textureGroup_ = input.readInt32();
              break;
            }
            case 168: {
              bitField0_ |= 0x00080000;
              for3D_ = input.readBool();
              break;
            }
            case 176: {
              bitField0_ |= 0x00100000;
              width_ = input.readUInt32();
              break;
            }
            case 184: {
              bitField0_ |= 0x00200000;
              height_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
          subimages_ = subimages_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return buffers.resources.SpriteOuterClass.internal_static_buffers_resources_Sprite_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return buffers.resources.SpriteOuterClass.internal_static_buffers_resources_Sprite_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              buffers.resources.SpriteOuterClass.Sprite.class, buffers.resources.SpriteOuterClass.Sprite.Builder.class);
    }

    /**
     * Protobuf enum {@code buffers.resources.Sprite.Shape}
     */
    public enum Shape
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>PRECISE = 0;</code>
       */
      PRECISE(0),
      /**
       * <code>RECTANGLE = 1;</code>
       */
      RECTANGLE(1),
      /**
       * <code>DISK = 2;</code>
       */
      DISK(2),
      /**
       * <code>DIAMOND = 3;</code>
       */
      DIAMOND(3),
      ;

      /**
       * <code>PRECISE = 0;</code>
       */
      public static final int PRECISE_VALUE = 0;
      /**
       * <code>RECTANGLE = 1;</code>
       */
      public static final int RECTANGLE_VALUE = 1;
      /**
       * <code>DISK = 2;</code>
       */
      public static final int DISK_VALUE = 2;
      /**
       * <code>DIAMOND = 3;</code>
       */
      public static final int DIAMOND_VALUE = 3;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Shape valueOf(int value) {
        return forNumber(value);
      }

      public static Shape forNumber(int value) {
        switch (value) {
          case 0: return PRECISE;
          case 1: return RECTANGLE;
          case 2: return DISK;
          case 3: return DIAMOND;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Shape>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Shape> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Shape>() {
              public Shape findValueByNumber(int number) {
                return Shape.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return buffers.resources.SpriteOuterClass.Sprite.getDescriptor().getEnumTypes().get(0);
      }

      private static final Shape[] VALUES = values();

      public static Shape valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Shape(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:buffers.resources.Sprite.Shape)
    }

    /**
     * Protobuf enum {@code buffers.resources.Sprite.BoundingBox}
     */
    public enum BoundingBox
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>AUTOMATIC = 0;</code>
       */
      AUTOMATIC(0),
      /**
       * <code>FULL_IMAGE = 1;</code>
       */
      FULL_IMAGE(1),
      /**
       * <code>MANUAL = 2;</code>
       */
      MANUAL(2),
      ;

      /**
       * <code>AUTOMATIC = 0;</code>
       */
      public static final int AUTOMATIC_VALUE = 0;
      /**
       * <code>FULL_IMAGE = 1;</code>
       */
      public static final int FULL_IMAGE_VALUE = 1;
      /**
       * <code>MANUAL = 2;</code>
       */
      public static final int MANUAL_VALUE = 2;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static BoundingBox valueOf(int value) {
        return forNumber(value);
      }

      public static BoundingBox forNumber(int value) {
        switch (value) {
          case 0: return AUTOMATIC;
          case 1: return FULL_IMAGE;
          case 2: return MANUAL;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<BoundingBox>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          BoundingBox> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<BoundingBox>() {
              public BoundingBox findValueByNumber(int number) {
                return BoundingBox.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return buffers.resources.SpriteOuterClass.Sprite.getDescriptor().getEnumTypes().get(1);
      }

      private static final BoundingBox[] VALUES = values();

      public static BoundingBox valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private BoundingBox(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:buffers.resources.Sprite.BoundingBox)
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <code>optional string name = 1;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ID_FIELD_NUMBER = 2;
    private int id_;
    /**
     * <code>optional int32 id = 2 [(.buffers.gmx) = "GMX_DEPRECATED"];</code>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 id = 2 [(.buffers.gmx) = "GMX_DEPRECATED"];</code>
     */
    public int getId() {
      return id_;
    }

    public static final int PRELOAD_FIELD_NUMBER = 4;
    private boolean preload_;
    /**
     * <code>optional bool preload = 4 [(.buffers.gmx) = "GMX_DEPRECATED"];</code>
     */
    public boolean hasPreload() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool preload = 4 [(.buffers.gmx) = "GMX_DEPRECATED"];</code>
     */
    public boolean getPreload() {
      return preload_;
    }

    public static final int TRANSPARENT_FIELD_NUMBER = 5;
    private boolean transparent_;
    /**
     * <code>optional bool transparent = 5 [(.buffers.gmx) = "GMX_DEPRECATED"];</code>
     */
    public boolean hasTransparent() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bool transparent = 5 [(.buffers.gmx) = "GMX_DEPRECATED"];</code>
     */
    public boolean getTransparent() {
      return transparent_;
    }

    public static final int SMOOTH_EDGES_FIELD_NUMBER = 6;
    private boolean smoothEdges_;
    /**
     * <code>optional bool smooth_edges = 6 [(.buffers.gmx) = "GMX_DEPRECATED"];</code>
     */
    public boolean hasSmoothEdges() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bool smooth_edges = 6 [(.buffers.gmx) = "GMX_DEPRECATED"];</code>
     */
    public boolean getSmoothEdges() {
      return smoothEdges_;
    }

    public static final int ALPHA_TOLERANCE_FIELD_NUMBER = 7;
    private int alphaTolerance_;
    /**
     * <code>optional int32 alpha_tolerance = 7 [(.buffers.gmx) = "coltolerance"];</code>
     */
    public boolean hasAlphaTolerance() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 alpha_tolerance = 7 [(.buffers.gmx) = "coltolerance"];</code>
     */
    public int getAlphaTolerance() {
      return alphaTolerance_;
    }

    public static final int SEPARATE_MASK_FIELD_NUMBER = 8;
    private boolean separateMask_;
    /**
     * <code>optional bool separate_mask = 8 [(.buffers.gmx) = "sepmasks"];</code>
     */
    public boolean hasSeparateMask() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bool separate_mask = 8 [(.buffers.gmx) = "sepmasks"];</code>
     */
    public boolean getSeparateMask() {
      return separateMask_;
    }

    public static final int ORIGIN_X_FIELD_NUMBER = 9;
    private int originX_;
    /**
     * <code>optional int32 origin_x = 9 [(.buffers.gmx) = "xorig"];</code>
     */
    public boolean hasOriginX() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 origin_x = 9 [(.buffers.gmx) = "xorig"];</code>
     */
    public int getOriginX() {
      return originX_;
    }

    public static final int ORIGIN_Y_FIELD_NUMBER = 10;
    private int originY_;
    /**
     * <code>optional int32 origin_y = 10 [(.buffers.gmx) = "yorigin"];</code>
     */
    public boolean hasOriginY() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 origin_y = 10 [(.buffers.gmx) = "yorigin"];</code>
     */
    public int getOriginY() {
      return originY_;
    }

    public static final int SHAPE_FIELD_NUMBER = 11;
    private int shape_;
    /**
     * <code>optional .buffers.resources.Sprite.Shape shape = 11 [(.buffers.gmx) = "colkind"];</code>
     */
    public boolean hasShape() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .buffers.resources.Sprite.Shape shape = 11 [(.buffers.gmx) = "colkind"];</code>
     */
    public buffers.resources.SpriteOuterClass.Sprite.Shape getShape() {
      buffers.resources.SpriteOuterClass.Sprite.Shape result = buffers.resources.SpriteOuterClass.Sprite.Shape.valueOf(shape_);
      return result == null ? buffers.resources.SpriteOuterClass.Sprite.Shape.PRECISE : result;
    }

    public static final int BBOX_MODE_FIELD_NUMBER = 12;
    private int bboxMode_;
    /**
     * <code>optional .buffers.resources.Sprite.BoundingBox bbox_mode = 12 [(.buffers.gmx) = "bboxmode"];</code>
     */
    public boolean hasBboxMode() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .buffers.resources.Sprite.BoundingBox bbox_mode = 12 [(.buffers.gmx) = "bboxmode"];</code>
     */
    public buffers.resources.SpriteOuterClass.Sprite.BoundingBox getBboxMode() {
      buffers.resources.SpriteOuterClass.Sprite.BoundingBox result = buffers.resources.SpriteOuterClass.Sprite.BoundingBox.valueOf(bboxMode_);
      return result == null ? buffers.resources.SpriteOuterClass.Sprite.BoundingBox.AUTOMATIC : result;
    }

    public static final int BBOX_LEFT_FIELD_NUMBER = 13;
    private int bboxLeft_;
    /**
     * <code>optional int32 bbox_left = 13;</code>
     */
    public boolean hasBboxLeft() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 bbox_left = 13;</code>
     */
    public int getBboxLeft() {
      return bboxLeft_;
    }

    public static final int BBOX_RIGHT_FIELD_NUMBER = 14;
    private int bboxRight_;
    /**
     * <code>optional int32 bbox_right = 14;</code>
     */
    public boolean hasBboxRight() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int32 bbox_right = 14;</code>
     */
    public int getBboxRight() {
      return bboxRight_;
    }

    public static final int BBOX_TOP_FIELD_NUMBER = 15;
    private int bboxTop_;
    /**
     * <code>optional int32 bbox_top = 15;</code>
     */
    public boolean hasBboxTop() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional int32 bbox_top = 15;</code>
     */
    public int getBboxTop() {
      return bboxTop_;
    }

    public static final int BBOX_BOTTOM_FIELD_NUMBER = 16;
    private int bboxBottom_;
    /**
     * <code>optional int32 bbox_bottom = 16;</code>
     */
    public boolean hasBboxBottom() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional int32 bbox_bottom = 16;</code>
     */
    public int getBboxBottom() {
      return bboxBottom_;
    }

    public static final int TYPE_FIELD_NUMBER = 17;
    private int type_;
    /**
     * <code>optional int32 type = 17;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional int32 type = 17;</code>
     */
    public int getType() {
      return type_;
    }

    public static final int H_TILE_FIELD_NUMBER = 18;
    private int hTile_;
    /**
     * <code>optional int32 h_tile = 18 [(.buffers.gmx) = "HTile"];</code>
     */
    public boolean hasHTile() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional int32 h_tile = 18 [(.buffers.gmx) = "HTile"];</code>
     */
    public int getHTile() {
      return hTile_;
    }

    public static final int V_TILE_FIELD_NUMBER = 19;
    private int vTile_;
    /**
     * <code>optional int32 v_tile = 19 [(.buffers.gmx) = "VTile"];</code>
     */
    public boolean hasVTile() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional int32 v_tile = 19 [(.buffers.gmx) = "VTile"];</code>
     */
    public int getVTile() {
      return vTile_;
    }

    public static final int TEXTURE_GROUP_FIELD_NUMBER = 20;
    private int textureGroup_;
    /**
     * <code>optional int32 texture_group = 20 [(.buffers.gmx) = "TextureGroups/TextureGroup0"];</code>
     */
    public boolean hasTextureGroup() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional int32 texture_group = 20 [(.buffers.gmx) = "TextureGroups/TextureGroup0"];</code>
     */
    public int getTextureGroup() {
      return textureGroup_;
    }

    public static final int FOR3D_FIELD_NUMBER = 21;
    private boolean for3D_;
    /**
     * <code>optional bool for3D = 21 [(.buffers.gmx) = "For3D"];</code>
     */
    public boolean hasFor3D() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional bool for3D = 21 [(.buffers.gmx) = "For3D"];</code>
     */
    public boolean getFor3D() {
      return for3D_;
    }

    public static final int WIDTH_FIELD_NUMBER = 22;
    private int width_;
    /**
     * <code>optional uint32 width = 22;</code>
     */
    public boolean hasWidth() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional uint32 width = 22;</code>
     */
    public int getWidth() {
      return width_;
    }

    public static final int HEIGHT_FIELD_NUMBER = 23;
    private int height_;
    /**
     * <code>optional uint32 height = 23;</code>
     */
    public boolean hasHeight() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional uint32 height = 23;</code>
     */
    public int getHeight() {
      return height_;
    }

    public static final int SUBIMAGES_FIELD_NUMBER = 3;
    private com.google.protobuf.LazyStringList subimages_;
    /**
     * <code>repeated string subimages = 3 [(.buffers.gmx) = "frames/frame", (.buffers.file_path) = true];</code>
     */
    public com.google.protobuf.ProtocolStringList
        getSubimagesList() {
      return subimages_;
    }
    /**
     * <code>repeated string subimages = 3 [(.buffers.gmx) = "frames/frame", (.buffers.file_path) = true];</code>
     */
    public int getSubimagesCount() {
      return subimages_.size();
    }
    /**
     * <code>repeated string subimages = 3 [(.buffers.gmx) = "frames/frame", (.buffers.file_path) = true];</code>
     */
    public java.lang.String getSubimages(int index) {
      return subimages_.get(index);
    }
    /**
     * <code>repeated string subimages = 3 [(.buffers.gmx) = "frames/frame", (.buffers.file_path) = true];</code>
     */
    public com.google.protobuf.ByteString
        getSubimagesBytes(int index) {
      return subimages_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, id_);
      }
      for (int i = 0; i < subimages_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, subimages_.getRaw(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(4, preload_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(5, transparent_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(6, smoothEdges_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(7, alphaTolerance_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(8, separateMask_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(9, originX_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(10, originY_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeEnum(11, shape_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeEnum(12, bboxMode_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(13, bboxLeft_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(14, bboxRight_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(15, bboxTop_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(16, bboxBottom_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeInt32(17, type_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeInt32(18, hTile_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeInt32(19, vTile_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeInt32(20, textureGroup_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeBool(21, for3D_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeUInt32(22, width_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeUInt32(23, height_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, id_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < subimages_.size(); i++) {
          dataSize += computeStringSizeNoTag(subimages_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getSubimagesList().size();
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, preload_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, transparent_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, smoothEdges_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, alphaTolerance_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, separateMask_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, originX_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, originY_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(11, shape_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(12, bboxMode_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, bboxLeft_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, bboxRight_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, bboxTop_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, bboxBottom_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, type_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(18, hTile_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(19, vTile_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(20, textureGroup_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(21, for3D_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(22, width_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(23, height_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof buffers.resources.SpriteOuterClass.Sprite)) {
        return super.equals(obj);
      }
      buffers.resources.SpriteOuterClass.Sprite other = (buffers.resources.SpriteOuterClass.Sprite) obj;

      boolean result = true;
      result = result && (hasName() == other.hasName());
      if (hasName()) {
        result = result && getName()
            .equals(other.getName());
      }
      result = result && (hasId() == other.hasId());
      if (hasId()) {
        result = result && (getId()
            == other.getId());
      }
      result = result && (hasPreload() == other.hasPreload());
      if (hasPreload()) {
        result = result && (getPreload()
            == other.getPreload());
      }
      result = result && (hasTransparent() == other.hasTransparent());
      if (hasTransparent()) {
        result = result && (getTransparent()
            == other.getTransparent());
      }
      result = result && (hasSmoothEdges() == other.hasSmoothEdges());
      if (hasSmoothEdges()) {
        result = result && (getSmoothEdges()
            == other.getSmoothEdges());
      }
      result = result && (hasAlphaTolerance() == other.hasAlphaTolerance());
      if (hasAlphaTolerance()) {
        result = result && (getAlphaTolerance()
            == other.getAlphaTolerance());
      }
      result = result && (hasSeparateMask() == other.hasSeparateMask());
      if (hasSeparateMask()) {
        result = result && (getSeparateMask()
            == other.getSeparateMask());
      }
      result = result && (hasOriginX() == other.hasOriginX());
      if (hasOriginX()) {
        result = result && (getOriginX()
            == other.getOriginX());
      }
      result = result && (hasOriginY() == other.hasOriginY());
      if (hasOriginY()) {
        result = result && (getOriginY()
            == other.getOriginY());
      }
      result = result && (hasShape() == other.hasShape());
      if (hasShape()) {
        result = result && shape_ == other.shape_;
      }
      result = result && (hasBboxMode() == other.hasBboxMode());
      if (hasBboxMode()) {
        result = result && bboxMode_ == other.bboxMode_;
      }
      result = result && (hasBboxLeft() == other.hasBboxLeft());
      if (hasBboxLeft()) {
        result = result && (getBboxLeft()
            == other.getBboxLeft());
      }
      result = result && (hasBboxRight() == other.hasBboxRight());
      if (hasBboxRight()) {
        result = result && (getBboxRight()
            == other.getBboxRight());
      }
      result = result && (hasBboxTop() == other.hasBboxTop());
      if (hasBboxTop()) {
        result = result && (getBboxTop()
            == other.getBboxTop());
      }
      result = result && (hasBboxBottom() == other.hasBboxBottom());
      if (hasBboxBottom()) {
        result = result && (getBboxBottom()
            == other.getBboxBottom());
      }
      result = result && (hasType() == other.hasType());
      if (hasType()) {
        result = result && (getType()
            == other.getType());
      }
      result = result && (hasHTile() == other.hasHTile());
      if (hasHTile()) {
        result = result && (getHTile()
            == other.getHTile());
      }
      result = result && (hasVTile() == other.hasVTile());
      if (hasVTile()) {
        result = result && (getVTile()
            == other.getVTile());
      }
      result = result && (hasTextureGroup() == other.hasTextureGroup());
      if (hasTextureGroup()) {
        result = result && (getTextureGroup()
            == other.getTextureGroup());
      }
      result = result && (hasFor3D() == other.hasFor3D());
      if (hasFor3D()) {
        result = result && (getFor3D()
            == other.getFor3D());
      }
      result = result && (hasWidth() == other.hasWidth());
      if (hasWidth()) {
        result = result && (getWidth()
            == other.getWidth());
      }
      result = result && (hasHeight() == other.hasHeight());
      if (hasHeight()) {
        result = result && (getHeight()
            == other.getHeight());
      }
      result = result && getSubimagesList()
          .equals(other.getSubimagesList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasName()) {
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
      }
      if (hasId()) {
        hash = (37 * hash) + ID_FIELD_NUMBER;
        hash = (53 * hash) + getId();
      }
      if (hasPreload()) {
        hash = (37 * hash) + PRELOAD_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getPreload());
      }
      if (hasTransparent()) {
        hash = (37 * hash) + TRANSPARENT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getTransparent());
      }
      if (hasSmoothEdges()) {
        hash = (37 * hash) + SMOOTH_EDGES_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getSmoothEdges());
      }
      if (hasAlphaTolerance()) {
        hash = (37 * hash) + ALPHA_TOLERANCE_FIELD_NUMBER;
        hash = (53 * hash) + getAlphaTolerance();
      }
      if (hasSeparateMask()) {
        hash = (37 * hash) + SEPARATE_MASK_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getSeparateMask());
      }
      if (hasOriginX()) {
        hash = (37 * hash) + ORIGIN_X_FIELD_NUMBER;
        hash = (53 * hash) + getOriginX();
      }
      if (hasOriginY()) {
        hash = (37 * hash) + ORIGIN_Y_FIELD_NUMBER;
        hash = (53 * hash) + getOriginY();
      }
      if (hasShape()) {
        hash = (37 * hash) + SHAPE_FIELD_NUMBER;
        hash = (53 * hash) + shape_;
      }
      if (hasBboxMode()) {
        hash = (37 * hash) + BBOX_MODE_FIELD_NUMBER;
        hash = (53 * hash) + bboxMode_;
      }
      if (hasBboxLeft()) {
        hash = (37 * hash) + BBOX_LEFT_FIELD_NUMBER;
        hash = (53 * hash) + getBboxLeft();
      }
      if (hasBboxRight()) {
        hash = (37 * hash) + BBOX_RIGHT_FIELD_NUMBER;
        hash = (53 * hash) + getBboxRight();
      }
      if (hasBboxTop()) {
        hash = (37 * hash) + BBOX_TOP_FIELD_NUMBER;
        hash = (53 * hash) + getBboxTop();
      }
      if (hasBboxBottom()) {
        hash = (37 * hash) + BBOX_BOTTOM_FIELD_NUMBER;
        hash = (53 * hash) + getBboxBottom();
      }
      if (hasType()) {
        hash = (37 * hash) + TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getType();
      }
      if (hasHTile()) {
        hash = (37 * hash) + H_TILE_FIELD_NUMBER;
        hash = (53 * hash) + getHTile();
      }
      if (hasVTile()) {
        hash = (37 * hash) + V_TILE_FIELD_NUMBER;
        hash = (53 * hash) + getVTile();
      }
      if (hasTextureGroup()) {
        hash = (37 * hash) + TEXTURE_GROUP_FIELD_NUMBER;
        hash = (53 * hash) + getTextureGroup();
      }
      if (hasFor3D()) {
        hash = (37 * hash) + FOR3D_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getFor3D());
      }
      if (hasWidth()) {
        hash = (37 * hash) + WIDTH_FIELD_NUMBER;
        hash = (53 * hash) + getWidth();
      }
      if (hasHeight()) {
        hash = (37 * hash) + HEIGHT_FIELD_NUMBER;
        hash = (53 * hash) + getHeight();
      }
      if (getSubimagesCount() > 0) {
        hash = (37 * hash) + SUBIMAGES_FIELD_NUMBER;
        hash = (53 * hash) + getSubimagesList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static buffers.resources.SpriteOuterClass.Sprite parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static buffers.resources.SpriteOuterClass.Sprite parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static buffers.resources.SpriteOuterClass.Sprite parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static buffers.resources.SpriteOuterClass.Sprite parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static buffers.resources.SpriteOuterClass.Sprite parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static buffers.resources.SpriteOuterClass.Sprite parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static buffers.resources.SpriteOuterClass.Sprite parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static buffers.resources.SpriteOuterClass.Sprite parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static buffers.resources.SpriteOuterClass.Sprite parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static buffers.resources.SpriteOuterClass.Sprite parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static buffers.resources.SpriteOuterClass.Sprite parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static buffers.resources.SpriteOuterClass.Sprite parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(buffers.resources.SpriteOuterClass.Sprite prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code buffers.resources.Sprite}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:buffers.resources.Sprite)
        buffers.resources.SpriteOuterClass.SpriteOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return buffers.resources.SpriteOuterClass.internal_static_buffers_resources_Sprite_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return buffers.resources.SpriteOuterClass.internal_static_buffers_resources_Sprite_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                buffers.resources.SpriteOuterClass.Sprite.class, buffers.resources.SpriteOuterClass.Sprite.Builder.class);
      }

      // Construct using buffers.resources.SpriteOuterClass.Sprite.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        preload_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        transparent_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        smoothEdges_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        alphaTolerance_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        separateMask_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        originX_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        originY_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        shape_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        bboxMode_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        bboxLeft_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        bboxRight_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        bboxTop_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        bboxBottom_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        type_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        hTile_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        vTile_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        textureGroup_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        for3D_ = false;
        bitField0_ = (bitField0_ & ~0x00080000);
        width_ = 0;
        bitField0_ = (bitField0_ & ~0x00100000);
        height_ = 0;
        bitField0_ = (bitField0_ & ~0x00200000);
        subimages_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00400000);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return buffers.resources.SpriteOuterClass.internal_static_buffers_resources_Sprite_descriptor;
      }

      public buffers.resources.SpriteOuterClass.Sprite getDefaultInstanceForType() {
        return buffers.resources.SpriteOuterClass.Sprite.getDefaultInstance();
      }

      public buffers.resources.SpriteOuterClass.Sprite build() {
        buffers.resources.SpriteOuterClass.Sprite result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public buffers.resources.SpriteOuterClass.Sprite buildPartial() {
        buffers.resources.SpriteOuterClass.Sprite result = new buffers.resources.SpriteOuterClass.Sprite(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.preload_ = preload_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.transparent_ = transparent_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.smoothEdges_ = smoothEdges_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.alphaTolerance_ = alphaTolerance_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.separateMask_ = separateMask_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.originX_ = originX_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.originY_ = originY_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.shape_ = shape_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.bboxMode_ = bboxMode_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.bboxLeft_ = bboxLeft_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.bboxRight_ = bboxRight_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.bboxTop_ = bboxTop_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.bboxBottom_ = bboxBottom_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.hTile_ = hTile_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.vTile_ = vTile_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.textureGroup_ = textureGroup_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.for3D_ = for3D_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.width_ = width_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.height_ = height_;
        if (((bitField0_ & 0x00400000) == 0x00400000)) {
          subimages_ = subimages_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00400000);
        }
        result.subimages_ = subimages_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof buffers.resources.SpriteOuterClass.Sprite) {
          return mergeFrom((buffers.resources.SpriteOuterClass.Sprite)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(buffers.resources.SpriteOuterClass.Sprite other) {
        if (other == buffers.resources.SpriteOuterClass.Sprite.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasPreload()) {
          setPreload(other.getPreload());
        }
        if (other.hasTransparent()) {
          setTransparent(other.getTransparent());
        }
        if (other.hasSmoothEdges()) {
          setSmoothEdges(other.getSmoothEdges());
        }
        if (other.hasAlphaTolerance()) {
          setAlphaTolerance(other.getAlphaTolerance());
        }
        if (other.hasSeparateMask()) {
          setSeparateMask(other.getSeparateMask());
        }
        if (other.hasOriginX()) {
          setOriginX(other.getOriginX());
        }
        if (other.hasOriginY()) {
          setOriginY(other.getOriginY());
        }
        if (other.hasShape()) {
          setShape(other.getShape());
        }
        if (other.hasBboxMode()) {
          setBboxMode(other.getBboxMode());
        }
        if (other.hasBboxLeft()) {
          setBboxLeft(other.getBboxLeft());
        }
        if (other.hasBboxRight()) {
          setBboxRight(other.getBboxRight());
        }
        if (other.hasBboxTop()) {
          setBboxTop(other.getBboxTop());
        }
        if (other.hasBboxBottom()) {
          setBboxBottom(other.getBboxBottom());
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasHTile()) {
          setHTile(other.getHTile());
        }
        if (other.hasVTile()) {
          setVTile(other.getVTile());
        }
        if (other.hasTextureGroup()) {
          setTextureGroup(other.getTextureGroup());
        }
        if (other.hasFor3D()) {
          setFor3D(other.getFor3D());
        }
        if (other.hasWidth()) {
          setWidth(other.getWidth());
        }
        if (other.hasHeight()) {
          setHeight(other.getHeight());
        }
        if (!other.subimages_.isEmpty()) {
          if (subimages_.isEmpty()) {
            subimages_ = other.subimages_;
            bitField0_ = (bitField0_ & ~0x00400000);
          } else {
            ensureSubimagesIsMutable();
            subimages_.addAll(other.subimages_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        buffers.resources.SpriteOuterClass.Sprite parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (buffers.resources.SpriteOuterClass.Sprite) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 1;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      private int id_ ;
      /**
       * <code>optional int32 id = 2 [(.buffers.gmx) = "GMX_DEPRECATED"];</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 id = 2 [(.buffers.gmx) = "GMX_DEPRECATED"];</code>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>optional int32 id = 2 [(.buffers.gmx) = "GMX_DEPRECATED"];</code>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000002;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 id = 2 [(.buffers.gmx) = "GMX_DEPRECATED"];</code>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        id_ = 0;
        onChanged();
        return this;
      }

      private boolean preload_ ;
      /**
       * <code>optional bool preload = 4 [(.buffers.gmx) = "GMX_DEPRECATED"];</code>
       */
      public boolean hasPreload() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool preload = 4 [(.buffers.gmx) = "GMX_DEPRECATED"];</code>
       */
      public boolean getPreload() {
        return preload_;
      }
      /**
       * <code>optional bool preload = 4 [(.buffers.gmx) = "GMX_DEPRECATED"];</code>
       */
      public Builder setPreload(boolean value) {
        bitField0_ |= 0x00000004;
        preload_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool preload = 4 [(.buffers.gmx) = "GMX_DEPRECATED"];</code>
       */
      public Builder clearPreload() {
        bitField0_ = (bitField0_ & ~0x00000004);
        preload_ = false;
        onChanged();
        return this;
      }

      private boolean transparent_ ;
      /**
       * <code>optional bool transparent = 5 [(.buffers.gmx) = "GMX_DEPRECATED"];</code>
       */
      public boolean hasTransparent() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bool transparent = 5 [(.buffers.gmx) = "GMX_DEPRECATED"];</code>
       */
      public boolean getTransparent() {
        return transparent_;
      }
      /**
       * <code>optional bool transparent = 5 [(.buffers.gmx) = "GMX_DEPRECATED"];</code>
       */
      public Builder setTransparent(boolean value) {
        bitField0_ |= 0x00000008;
        transparent_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool transparent = 5 [(.buffers.gmx) = "GMX_DEPRECATED"];</code>
       */
      public Builder clearTransparent() {
        bitField0_ = (bitField0_ & ~0x00000008);
        transparent_ = false;
        onChanged();
        return this;
      }

      private boolean smoothEdges_ ;
      /**
       * <code>optional bool smooth_edges = 6 [(.buffers.gmx) = "GMX_DEPRECATED"];</code>
       */
      public boolean hasSmoothEdges() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bool smooth_edges = 6 [(.buffers.gmx) = "GMX_DEPRECATED"];</code>
       */
      public boolean getSmoothEdges() {
        return smoothEdges_;
      }
      /**
       * <code>optional bool smooth_edges = 6 [(.buffers.gmx) = "GMX_DEPRECATED"];</code>
       */
      public Builder setSmoothEdges(boolean value) {
        bitField0_ |= 0x00000010;
        smoothEdges_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool smooth_edges = 6 [(.buffers.gmx) = "GMX_DEPRECATED"];</code>
       */
      public Builder clearSmoothEdges() {
        bitField0_ = (bitField0_ & ~0x00000010);
        smoothEdges_ = false;
        onChanged();
        return this;
      }

      private int alphaTolerance_ ;
      /**
       * <code>optional int32 alpha_tolerance = 7 [(.buffers.gmx) = "coltolerance"];</code>
       */
      public boolean hasAlphaTolerance() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 alpha_tolerance = 7 [(.buffers.gmx) = "coltolerance"];</code>
       */
      public int getAlphaTolerance() {
        return alphaTolerance_;
      }
      /**
       * <code>optional int32 alpha_tolerance = 7 [(.buffers.gmx) = "coltolerance"];</code>
       */
      public Builder setAlphaTolerance(int value) {
        bitField0_ |= 0x00000020;
        alphaTolerance_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 alpha_tolerance = 7 [(.buffers.gmx) = "coltolerance"];</code>
       */
      public Builder clearAlphaTolerance() {
        bitField0_ = (bitField0_ & ~0x00000020);
        alphaTolerance_ = 0;
        onChanged();
        return this;
      }

      private boolean separateMask_ ;
      /**
       * <code>optional bool separate_mask = 8 [(.buffers.gmx) = "sepmasks"];</code>
       */
      public boolean hasSeparateMask() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bool separate_mask = 8 [(.buffers.gmx) = "sepmasks"];</code>
       */
      public boolean getSeparateMask() {
        return separateMask_;
      }
      /**
       * <code>optional bool separate_mask = 8 [(.buffers.gmx) = "sepmasks"];</code>
       */
      public Builder setSeparateMask(boolean value) {
        bitField0_ |= 0x00000040;
        separateMask_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool separate_mask = 8 [(.buffers.gmx) = "sepmasks"];</code>
       */
      public Builder clearSeparateMask() {
        bitField0_ = (bitField0_ & ~0x00000040);
        separateMask_ = false;
        onChanged();
        return this;
      }

      private int originX_ ;
      /**
       * <code>optional int32 origin_x = 9 [(.buffers.gmx) = "xorig"];</code>
       */
      public boolean hasOriginX() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 origin_x = 9 [(.buffers.gmx) = "xorig"];</code>
       */
      public int getOriginX() {
        return originX_;
      }
      /**
       * <code>optional int32 origin_x = 9 [(.buffers.gmx) = "xorig"];</code>
       */
      public Builder setOriginX(int value) {
        bitField0_ |= 0x00000080;
        originX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 origin_x = 9 [(.buffers.gmx) = "xorig"];</code>
       */
      public Builder clearOriginX() {
        bitField0_ = (bitField0_ & ~0x00000080);
        originX_ = 0;
        onChanged();
        return this;
      }

      private int originY_ ;
      /**
       * <code>optional int32 origin_y = 10 [(.buffers.gmx) = "yorigin"];</code>
       */
      public boolean hasOriginY() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 origin_y = 10 [(.buffers.gmx) = "yorigin"];</code>
       */
      public int getOriginY() {
        return originY_;
      }
      /**
       * <code>optional int32 origin_y = 10 [(.buffers.gmx) = "yorigin"];</code>
       */
      public Builder setOriginY(int value) {
        bitField0_ |= 0x00000100;
        originY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 origin_y = 10 [(.buffers.gmx) = "yorigin"];</code>
       */
      public Builder clearOriginY() {
        bitField0_ = (bitField0_ & ~0x00000100);
        originY_ = 0;
        onChanged();
        return this;
      }

      private int shape_ = 0;
      /**
       * <code>optional .buffers.resources.Sprite.Shape shape = 11 [(.buffers.gmx) = "colkind"];</code>
       */
      public boolean hasShape() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .buffers.resources.Sprite.Shape shape = 11 [(.buffers.gmx) = "colkind"];</code>
       */
      public buffers.resources.SpriteOuterClass.Sprite.Shape getShape() {
        buffers.resources.SpriteOuterClass.Sprite.Shape result = buffers.resources.SpriteOuterClass.Sprite.Shape.valueOf(shape_);
        return result == null ? buffers.resources.SpriteOuterClass.Sprite.Shape.PRECISE : result;
      }
      /**
       * <code>optional .buffers.resources.Sprite.Shape shape = 11 [(.buffers.gmx) = "colkind"];</code>
       */
      public Builder setShape(buffers.resources.SpriteOuterClass.Sprite.Shape value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000200;
        shape_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .buffers.resources.Sprite.Shape shape = 11 [(.buffers.gmx) = "colkind"];</code>
       */
      public Builder clearShape() {
        bitField0_ = (bitField0_ & ~0x00000200);
        shape_ = 0;
        onChanged();
        return this;
      }

      private int bboxMode_ = 0;
      /**
       * <code>optional .buffers.resources.Sprite.BoundingBox bbox_mode = 12 [(.buffers.gmx) = "bboxmode"];</code>
       */
      public boolean hasBboxMode() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .buffers.resources.Sprite.BoundingBox bbox_mode = 12 [(.buffers.gmx) = "bboxmode"];</code>
       */
      public buffers.resources.SpriteOuterClass.Sprite.BoundingBox getBboxMode() {
        buffers.resources.SpriteOuterClass.Sprite.BoundingBox result = buffers.resources.SpriteOuterClass.Sprite.BoundingBox.valueOf(bboxMode_);
        return result == null ? buffers.resources.SpriteOuterClass.Sprite.BoundingBox.AUTOMATIC : result;
      }
      /**
       * <code>optional .buffers.resources.Sprite.BoundingBox bbox_mode = 12 [(.buffers.gmx) = "bboxmode"];</code>
       */
      public Builder setBboxMode(buffers.resources.SpriteOuterClass.Sprite.BoundingBox value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000400;
        bboxMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .buffers.resources.Sprite.BoundingBox bbox_mode = 12 [(.buffers.gmx) = "bboxmode"];</code>
       */
      public Builder clearBboxMode() {
        bitField0_ = (bitField0_ & ~0x00000400);
        bboxMode_ = 0;
        onChanged();
        return this;
      }

      private int bboxLeft_ ;
      /**
       * <code>optional int32 bbox_left = 13;</code>
       */
      public boolean hasBboxLeft() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 bbox_left = 13;</code>
       */
      public int getBboxLeft() {
        return bboxLeft_;
      }
      /**
       * <code>optional int32 bbox_left = 13;</code>
       */
      public Builder setBboxLeft(int value) {
        bitField0_ |= 0x00000800;
        bboxLeft_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 bbox_left = 13;</code>
       */
      public Builder clearBboxLeft() {
        bitField0_ = (bitField0_ & ~0x00000800);
        bboxLeft_ = 0;
        onChanged();
        return this;
      }

      private int bboxRight_ ;
      /**
       * <code>optional int32 bbox_right = 14;</code>
       */
      public boolean hasBboxRight() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 bbox_right = 14;</code>
       */
      public int getBboxRight() {
        return bboxRight_;
      }
      /**
       * <code>optional int32 bbox_right = 14;</code>
       */
      public Builder setBboxRight(int value) {
        bitField0_ |= 0x00001000;
        bboxRight_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 bbox_right = 14;</code>
       */
      public Builder clearBboxRight() {
        bitField0_ = (bitField0_ & ~0x00001000);
        bboxRight_ = 0;
        onChanged();
        return this;
      }

      private int bboxTop_ ;
      /**
       * <code>optional int32 bbox_top = 15;</code>
       */
      public boolean hasBboxTop() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 bbox_top = 15;</code>
       */
      public int getBboxTop() {
        return bboxTop_;
      }
      /**
       * <code>optional int32 bbox_top = 15;</code>
       */
      public Builder setBboxTop(int value) {
        bitField0_ |= 0x00002000;
        bboxTop_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 bbox_top = 15;</code>
       */
      public Builder clearBboxTop() {
        bitField0_ = (bitField0_ & ~0x00002000);
        bboxTop_ = 0;
        onChanged();
        return this;
      }

      private int bboxBottom_ ;
      /**
       * <code>optional int32 bbox_bottom = 16;</code>
       */
      public boolean hasBboxBottom() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 bbox_bottom = 16;</code>
       */
      public int getBboxBottom() {
        return bboxBottom_;
      }
      /**
       * <code>optional int32 bbox_bottom = 16;</code>
       */
      public Builder setBboxBottom(int value) {
        bitField0_ |= 0x00004000;
        bboxBottom_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 bbox_bottom = 16;</code>
       */
      public Builder clearBboxBottom() {
        bitField0_ = (bitField0_ & ~0x00004000);
        bboxBottom_ = 0;
        onChanged();
        return this;
      }

      private int type_ ;
      /**
       * <code>optional int32 type = 17;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 type = 17;</code>
       */
      public int getType() {
        return type_;
      }
      /**
       * <code>optional int32 type = 17;</code>
       */
      public Builder setType(int value) {
        bitField0_ |= 0x00008000;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 type = 17;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00008000);
        type_ = 0;
        onChanged();
        return this;
      }

      private int hTile_ ;
      /**
       * <code>optional int32 h_tile = 18 [(.buffers.gmx) = "HTile"];</code>
       */
      public boolean hasHTile() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional int32 h_tile = 18 [(.buffers.gmx) = "HTile"];</code>
       */
      public int getHTile() {
        return hTile_;
      }
      /**
       * <code>optional int32 h_tile = 18 [(.buffers.gmx) = "HTile"];</code>
       */
      public Builder setHTile(int value) {
        bitField0_ |= 0x00010000;
        hTile_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 h_tile = 18 [(.buffers.gmx) = "HTile"];</code>
       */
      public Builder clearHTile() {
        bitField0_ = (bitField0_ & ~0x00010000);
        hTile_ = 0;
        onChanged();
        return this;
      }

      private int vTile_ ;
      /**
       * <code>optional int32 v_tile = 19 [(.buffers.gmx) = "VTile"];</code>
       */
      public boolean hasVTile() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional int32 v_tile = 19 [(.buffers.gmx) = "VTile"];</code>
       */
      public int getVTile() {
        return vTile_;
      }
      /**
       * <code>optional int32 v_tile = 19 [(.buffers.gmx) = "VTile"];</code>
       */
      public Builder setVTile(int value) {
        bitField0_ |= 0x00020000;
        vTile_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 v_tile = 19 [(.buffers.gmx) = "VTile"];</code>
       */
      public Builder clearVTile() {
        bitField0_ = (bitField0_ & ~0x00020000);
        vTile_ = 0;
        onChanged();
        return this;
      }

      private int textureGroup_ ;
      /**
       * <code>optional int32 texture_group = 20 [(.buffers.gmx) = "TextureGroups/TextureGroup0"];</code>
       */
      public boolean hasTextureGroup() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional int32 texture_group = 20 [(.buffers.gmx) = "TextureGroups/TextureGroup0"];</code>
       */
      public int getTextureGroup() {
        return textureGroup_;
      }
      /**
       * <code>optional int32 texture_group = 20 [(.buffers.gmx) = "TextureGroups/TextureGroup0"];</code>
       */
      public Builder setTextureGroup(int value) {
        bitField0_ |= 0x00040000;
        textureGroup_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 texture_group = 20 [(.buffers.gmx) = "TextureGroups/TextureGroup0"];</code>
       */
      public Builder clearTextureGroup() {
        bitField0_ = (bitField0_ & ~0x00040000);
        textureGroup_ = 0;
        onChanged();
        return this;
      }

      private boolean for3D_ ;
      /**
       * <code>optional bool for3D = 21 [(.buffers.gmx) = "For3D"];</code>
       */
      public boolean hasFor3D() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional bool for3D = 21 [(.buffers.gmx) = "For3D"];</code>
       */
      public boolean getFor3D() {
        return for3D_;
      }
      /**
       * <code>optional bool for3D = 21 [(.buffers.gmx) = "For3D"];</code>
       */
      public Builder setFor3D(boolean value) {
        bitField0_ |= 0x00080000;
        for3D_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool for3D = 21 [(.buffers.gmx) = "For3D"];</code>
       */
      public Builder clearFor3D() {
        bitField0_ = (bitField0_ & ~0x00080000);
        for3D_ = false;
        onChanged();
        return this;
      }

      private int width_ ;
      /**
       * <code>optional uint32 width = 22;</code>
       */
      public boolean hasWidth() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional uint32 width = 22;</code>
       */
      public int getWidth() {
        return width_;
      }
      /**
       * <code>optional uint32 width = 22;</code>
       */
      public Builder setWidth(int value) {
        bitField0_ |= 0x00100000;
        width_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 width = 22;</code>
       */
      public Builder clearWidth() {
        bitField0_ = (bitField0_ & ~0x00100000);
        width_ = 0;
        onChanged();
        return this;
      }

      private int height_ ;
      /**
       * <code>optional uint32 height = 23;</code>
       */
      public boolean hasHeight() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional uint32 height = 23;</code>
       */
      public int getHeight() {
        return height_;
      }
      /**
       * <code>optional uint32 height = 23;</code>
       */
      public Builder setHeight(int value) {
        bitField0_ |= 0x00200000;
        height_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 height = 23;</code>
       */
      public Builder clearHeight() {
        bitField0_ = (bitField0_ & ~0x00200000);
        height_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList subimages_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureSubimagesIsMutable() {
        if (!((bitField0_ & 0x00400000) == 0x00400000)) {
          subimages_ = new com.google.protobuf.LazyStringArrayList(subimages_);
          bitField0_ |= 0x00400000;
         }
      }
      /**
       * <code>repeated string subimages = 3 [(.buffers.gmx) = "frames/frame", (.buffers.file_path) = true];</code>
       */
      public com.google.protobuf.ProtocolStringList
          getSubimagesList() {
        return subimages_.getUnmodifiableView();
      }
      /**
       * <code>repeated string subimages = 3 [(.buffers.gmx) = "frames/frame", (.buffers.file_path) = true];</code>
       */
      public int getSubimagesCount() {
        return subimages_.size();
      }
      /**
       * <code>repeated string subimages = 3 [(.buffers.gmx) = "frames/frame", (.buffers.file_path) = true];</code>
       */
      public java.lang.String getSubimages(int index) {
        return subimages_.get(index);
      }
      /**
       * <code>repeated string subimages = 3 [(.buffers.gmx) = "frames/frame", (.buffers.file_path) = true];</code>
       */
      public com.google.protobuf.ByteString
          getSubimagesBytes(int index) {
        return subimages_.getByteString(index);
      }
      /**
       * <code>repeated string subimages = 3 [(.buffers.gmx) = "frames/frame", (.buffers.file_path) = true];</code>
       */
      public Builder setSubimages(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureSubimagesIsMutable();
        subimages_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string subimages = 3 [(.buffers.gmx) = "frames/frame", (.buffers.file_path) = true];</code>
       */
      public Builder addSubimages(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureSubimagesIsMutable();
        subimages_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string subimages = 3 [(.buffers.gmx) = "frames/frame", (.buffers.file_path) = true];</code>
       */
      public Builder addAllSubimages(
          java.lang.Iterable<java.lang.String> values) {
        ensureSubimagesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, subimages_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string subimages = 3 [(.buffers.gmx) = "frames/frame", (.buffers.file_path) = true];</code>
       */
      public Builder clearSubimages() {
        subimages_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00400000);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string subimages = 3 [(.buffers.gmx) = "frames/frame", (.buffers.file_path) = true];</code>
       */
      public Builder addSubimagesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureSubimagesIsMutable();
        subimages_.add(value);
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:buffers.resources.Sprite)
    }

    // @@protoc_insertion_point(class_scope:buffers.resources.Sprite)
    private static final buffers.resources.SpriteOuterClass.Sprite DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new buffers.resources.SpriteOuterClass.Sprite();
    }

    public static buffers.resources.SpriteOuterClass.Sprite getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<Sprite>
        PARSER = new com.google.protobuf.AbstractParser<Sprite>() {
      public Sprite parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Sprite(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Sprite> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Sprite> getParserForType() {
      return PARSER;
    }

    public buffers.resources.SpriteOuterClass.Sprite getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buffers_resources_Sprite_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_buffers_resources_Sprite_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\026resources/Sprite.proto\022\021buffers.resour" +
      "ces\032\roptions.proto\"\341\006\n\006Sprite\022\014\n\004name\030\001 " +
      "\001(\t\022\036\n\002id\030\002 \001(\005B\022\202\265\030\016GMX_DEPRECATED\022#\n\007p" +
      "reload\030\004 \001(\010B\022\202\265\030\016GMX_DEPRECATED\022\'\n\013tran" +
      "sparent\030\005 \001(\010B\022\202\265\030\016GMX_DEPRECATED\022(\n\014smo" +
      "oth_edges\030\006 \001(\010B\022\202\265\030\016GMX_DEPRECATED\022)\n\017a" +
      "lpha_tolerance\030\007 \001(\005B\020\202\265\030\014coltolerance\022#" +
      "\n\rseparate_mask\030\010 \001(\010B\014\202\265\030\010sepmasks\022\033\n\010o" +
      "rigin_x\030\t \001(\005B\t\202\265\030\005xorig\022\035\n\010origin_y\030\n \001" +
      "(\005B\013\202\265\030\007yorigin\022;\n\005shape\030\013 \001(\0162\037.buffers" +
      ".resources.Sprite.ShapeB\013\202\265\030\007colkind\022F\n\t" +
      "bbox_mode\030\014 \001(\0162%.buffers.resources.Spri" +
      "te.BoundingBoxB\014\202\265\030\010bboxmode\022\021\n\tbbox_lef" +
      "t\030\r \001(\005\022\022\n\nbbox_right\030\016 \001(\005\022\020\n\010bbox_top\030" +
      "\017 \001(\005\022\023\n\013bbox_bottom\030\020 \001(\005\022\014\n\004type\030\021 \001(\005" +
      "\022\031\n\006h_tile\030\022 \001(\005B\t\202\265\030\005HTile\022\031\n\006v_tile\030\023 " +
      "\001(\005B\t\202\265\030\005VTile\0226\n\rtexture_group\030\024 \001(\005B\037\202" +
      "\265\030\033TextureGroups/TextureGroup0\022\030\n\005for3D\030" +
      "\025 \001(\010B\t\202\265\030\005For3D\022\r\n\005width\030\026 \001(\r\022\016\n\006heigh" +
      "t\030\027 \001(\r\022\'\n\tsubimages\030\003 \003(\tB\024\202\265\030\014frames/f" +
      "rame\230\265\030\001\":\n\005Shape\022\013\n\007PRECISE\020\000\022\r\n\tRECTAN" +
      "GLE\020\001\022\010\n\004DISK\020\002\022\013\n\007DIAMOND\020\003\"8\n\013Bounding" +
      "Box\022\r\n\tAUTOMATIC\020\000\022\016\n\nFULL_IMAGE\020\001\022\n\n\006MA" +
      "NUAL\020\002"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          buffers.Options.getDescriptor(),
        }, assigner);
    internal_static_buffers_resources_Sprite_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_buffers_resources_Sprite_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_buffers_resources_Sprite_descriptor,
        new java.lang.String[] { "Name", "Id", "Preload", "Transparent", "SmoothEdges", "AlphaTolerance", "SeparateMask", "OriginX", "OriginY", "Shape", "BboxMode", "BboxLeft", "BboxRight", "BboxTop", "BboxBottom", "Type", "HTile", "VTile", "TextureGroup", "For3D", "Width", "Height", "Subimages", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(buffers.Options.filePath);
    registry.add(buffers.Options.gmx);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    buffers.Options.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
